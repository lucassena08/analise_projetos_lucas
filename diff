diff --git a/ANALISE.md b/ANALISE.md
index df1ce7a..b5c6ab5 100644
--- a/ANALISE.md
+++ b/ANALISE.md
@@ -2,7 +2,7 @@
 
 ```java
 public Cep buscarCep(String numeracao) {
-		Connection conn = Database.getConnection();
+		Connection conn = Database.getConnection(); // Linha com problema
 		try {
 			String sql = "SELECT uf, cidade FROM faixas_cep WHERE ?::bigint BETWEEN CAST(cep_inicio AS bigint) AND CAST(cep_fim AS bigint) OFFSET 1LIMIT 1";
 			
@@ -30,6 +30,7 @@ public Cep buscarCep(String numeracao) {
 Neste exemplo, a conexão com o banco de dados é inicializada com o retorno do método. Porém, não é seguro, já que pode não haver sucesso na conexão.
 
 ```java
+// Resolução
 Connection conn = null;
 try {
 	conn = Database.getConnection();
@@ -70,6 +71,60 @@ O projeto foi analisado, porém sem necessidade de correções.
 
 > Analisando o projeto de `Componente de Geração de Imagem`: https://github.com/silaspassos/ucsal-pooa-componente-imagem
 
+No exemplo abaixo, o arquivo é escrito sem avisar ao usuário
+
+```java
+try {
+	component.save(finalImage, "examples/output.png");
+} catch (IOException e) {
+	System.out.println(e.getMessage());
+}
+```
+
+Esta seria uma alternativa que também armazena o path de escrita para reuso
+
+```java
+String outputPath = "examples/output.png";
+try {
+	component.save(finalImage, outputPath);
+	System.out.println("Succesfully saved image on " + outputPath);
+} catch (IOException e) {
+	System.out.println(e.getMessage());
+}
+```
+
 > Analisando o projeto de `Componente de tarefas assíncronas`: https://github.com/CauZy-Dev/TaskList/tree/main
 
+> [!NOTE]
+> Não foi encontrado o arquivo `pom.xml` no commit `c62536e`, portanto não foi possível executar o comando `mvn compile`, gerando o seguinte erro
+
+![](img/failed-to-compile.png)
+
+O código abaixo faz uso de uma classe `Console` e a instancia. Ao o analisar, percebe-se que ela se encontra
+no pacote `view`
+
+```java
+import view.Console;
+
+//...
+
+public static void main(String[] args) {
+		Console console = new Console();
+		console.console();
+}
+```
+
+Acredito que um nome mais semântico tanto para a classe quanto para o método sejam `Menu` e `open`. Já que a classe não se trata de um Console real implementado e sim uma interface de texto sendo renderizada nele.
+
+```java
+import view.Menu;
+
+//...
+
+public static void main(String[] args) {
+		Menu menu = new Menu();
+		menu.open();
+}
+```
+
 > Analisando o projeto de `Componente de Geração de Certificados`: https://github.com/armentanoc/CertificateGenerator
